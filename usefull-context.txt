A slice is like an array, except that its size changes dynamically as you add and remove items. The slice is one of Go's most useful types.

_ is called a blank indentifier

In Go's fmt package, the functions Print, Println, and Printf are used for formatted output, but they differ in how they handle formatting and output:

Print:

Outputs the arguments as they are, without adding any formatting or newlines.
Arguments are concatenated directly.
Example:
Println:

Outputs the arguments with a space between them and appends a newline at the end.
Useful for printing multiple values with automatic spacing and a newline.
Example:
Printf:

Outputs the arguments according to a specified format string.
Requires a format specifier (e.g., %v, %d, %s) to define how the arguments should be formatted.
Does not automatically add a newline.
Example:
Summary:
Use Print for simple concatenation.
Use Println for automatic spacing and newline.
Use Printf for formatted output with specific formatting requirements.


In Go, maps do not maintain insertion order because they are implemented as hash tables. 
This means that the key-value pairs are stored in an unordered manner based on hash values,
rather than in the order in which they were added.

Best Practices for Maps:
Zero Value: Accessing a non-existent key returns the zero value of the value type (e.g., 0 for int, "" for string, nil for pointers).
ok Idiom: Always check if a key exists using the "comma ok" idiom (value, ok := myMap[key]) before using its value. This prevents unexpected zero values and makes your code more robust.
Concurrency: Maps are not concurrency safe without external synchronization mechanisms (like sync.Mutex).


Best Practices for Structs:

Exported vs. Unexported Fields: Capitalization matters! Fields starting with a capital letter are exported (accessible from outside the package), while those starting with a lowercase letter are unexported (package-private). Use this to control encapsulation.
Embedding: You can embed other structs into a struct, inheriting their fields and methods (promotions). This is a powerful way to build complex data structures.